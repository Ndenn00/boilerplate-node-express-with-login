Add our boilerplate
1.x Git clone express-cc repo
2.x Run yarn / npm install

Create a new user in the database
1.x Create a form within a view 
2.x Create route that'll process the form's post request
router post 
post from ejs form 
3.x Create a database connection using .env file
install npm mysql 
see db.js
4. Grab form input and insert into database
db.query 
5. Add express-validation package
install express-validator
6. Validate user input on backend
unique constraints in db 
7. Validate user input on frontend
use req.checkbody() 
8. Hash our user's password
install bcrypt
place insert into bcrypt.hash()
9. Store user in database
db.query(Insert ... 
Login user (update user session, return auth cookie)
install express-sessions 
see authentication// in index
install passport 
initialise in app.js
in routes, get the user ID from register form LAST_INSERT_ID() 
login() user using result[0], pass all that to serialize and deserialize 
find user and use isAuthenticated in the redirected url 
use session store - express-mysql-session 
add all the express sesssion-store middleware to app 
a sessions table should be generated in your db 
add a the authenticationMiddleware function to your route 


Protect routes and only permit entry with authorization cookie
Use authentication function in each router.get that you want to restrict 

Create login page add a post
install passport-local

Create logout button

